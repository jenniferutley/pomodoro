{"version":3,"sources":["media/piece-of-cake.mp3","media/goes-without-saying.mp3","components/Break.js","components/LongBreak.js","components/Focus.js","components/Timer.js","components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Break","breakLength","setBreakLength","breakLengthInMinutes","moment","duration","asMinutes","htmlFor","type","id","min","max","value","onChange","e","inputBreakLengthInSeconds","target","asSeconds","LongBreak","longBreakLength","setLongBreakLength","longBreakLengthInMinutes","inputLongBreakLengthInSeconds","Focus","focusLength","setFocusLength","focusLengthInMinutes","inputFocusLengthInSeconds","Timer","handleStartPause","currentSessionType","timeLeft","setCurrentSessionType","isStarted","setTimeLeft","intervalID","setIntervalID","focusNumber","setFocusNumber","formattedTimeLeft","restartButton","name","playButton","pauseButton","skipButton","className","onClick","clearInterval","title","Settings","autoStart","setAutoStart","momentDurationFormatSetup","App","endFocusAudio","useRef","endBreakAudio","useState","format","trim","useEffect","current","volume","play","newIntervalID","setInterval","prevTimeLeft","newTimeLeft","ref","src","endFocus","endBreak","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ce4e493.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piece-of-cake.7ad935d5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/goes-without-saying.8d94a74c.mp3\";","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nfunction Break({ breakLength, setBreakLength }) {\r\n    \r\n    const breakLengthInMinutes = moment.duration(breakLength, \"s\").asMinutes()\r\n\r\n    const handleChangeBreak = (e) => {\r\n        const inputBreakLengthInSeconds = moment.duration(e.target.value, \"m\").asSeconds()\r\n        setBreakLength(inputBreakLengthInSeconds)\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Break</h2>\r\n                <label htmlFor=\"breakDuration\">duration:</label>\r\n                <input type=\"number\" id=\"breakDuration\" min=\"1\" max=\"59\" value={breakLengthInMinutes} onChange={handleChangeBreak} />           \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Break\r\n","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nfunction LongBreak({ longBreakLength, setLongBreakLength }) {\r\n\r\n    const longBreakLengthInMinutes = moment.duration(longBreakLength, \"s\").asMinutes()\r\n\r\n    const handleChangeLongBreak = (e) => {\r\n        const inputLongBreakLengthInSeconds = moment.duration(e.target.value, \"m\").asSeconds()\r\n        setLongBreakLength(inputLongBreakLengthInSeconds)\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Long Break</h2>\r\n                <label htmlFor=\"longBreakDuration\">duration:</label>\r\n                <input type=\"number\" id=\"longBreakDuration\" min=\"1\" value={longBreakLengthInMinutes} onChange={handleChangeLongBreak} />  \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default LongBreak\r\n","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nfunction Focus({ focusLength, setFocusLength}) {\r\n\r\n    const focusLengthInMinutes = moment.duration(focusLength, \"s\").asMinutes()\r\n\r\n    const handleChangeFocus = (e) => {\r\n        const inputFocusLengthInSeconds = moment.duration(e.target.value, \"m\").asSeconds()\r\n        setFocusLength(inputFocusLengthInSeconds)\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Focus</h2>\r\n                <label htmlFor=\"focusDuration\">duration:</label>\r\n                <input type=\"number\" id=\"focusDuration\" min=\"1\" max=\"59\" value={focusLengthInMinutes} onChange={handleChangeFocus} />            \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Focus\r\n","import React from 'react'\r\n\r\nfunction Timer({ handleStartPause, timeLeft, currentSessionType, setCurrentSessionType, isStarted, focusLength, setFocusLength, setTimeLeft, intervalID, setIntervalID, setBreakLength, breakLength, longBreakLength, setLongBreakLength, focusNumber, setFocusNumber, formattedTimeLeft}) {\r\n\r\n    const restartButton = <ion-icon name=\"play-skip-back-sharp\"></ion-icon>\r\n    const playButton = <ion-icon name=\"play-sharp\"></ion-icon>\r\n    const pauseButton = <ion-icon name=\"pause-sharp\"></ion-icon>\r\n    const skipButton = <ion-icon name=\"play-skip-forward-sharp\"></ion-icon>  \r\n\r\n    const handleRestart = () => {\r\n        clearInterval(intervalID)\r\n        setIntervalID(null)\r\n        if (currentSessionType === \"Focus\") {\r\n            setFocusLength(focusLength)\r\n            setTimeLeft(focusLength)\r\n        }\r\n        else if (currentSessionType === \"Break\") {\r\n            setBreakLength(breakLength)\r\n            setTimeLeft(breakLength)\r\n        }\r\n        else if (currentSessionType === \"Long Break\") {\r\n            setLongBreakLength(longBreakLength)\r\n            setTimeLeft(longBreakLength)\r\n        }\r\n    }\r\n\r\n    const handleSkip = () => {\r\n        clearInterval(intervalID)\r\n        setIntervalID(null)\r\n        if (currentSessionType === \"Focus\" && focusNumber < 3) {\r\n            setCurrentSessionType(\"Break\")\r\n            setFocusNumber(focusNumber + 1)\r\n        }\r\n        if (currentSessionType === \"Focus\" && focusNumber === 3) {\r\n            setCurrentSessionType(\"Long Break\")\r\n            setFocusNumber(focusNumber + 1)\r\n        }\r\n        else if (currentSessionType === \"Break\") {\r\n            setCurrentSessionType(\"Focus\")\r\n        }\r\n        else if (currentSessionType === \"Long Break\") {\r\n            setCurrentSessionType(\"Focus\")\r\n            setFocusNumber(0)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>{currentSessionType}</h2>\r\n            <p>{focusNumber}/4 Focus Sessions Completed</p>\r\n            <h1>{formattedTimeLeft}</h1>\r\n            <div className=\"controls\">\r\n                <div onClick={handleRestart} title=\"restart current session\">{restartButton}</div>\r\n                <div onClick={handleStartPause}>{isStarted ? pauseButton : playButton}</div>\r\n                <div onClick={handleSkip} title=\"skip to next session\">{skipButton}</div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import React from 'react'\r\n\r\nfunction Settings({ autoStart, setAutoStart }) {\r\n\r\n    const handleAutoStart = () => {\r\n        setAutoStart(false)\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Other Settings</h2>\r\n            <p>automatically start next session</p>\r\n            <p>number of focus sessions before long break</p>\r\n            <p>show timer in title</p>\r\n            <p>volume of notication sounds</p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { HelmetProvider }  from \"react-helmet-async\"\nimport moment from \"moment\"\nimport momentDurationFormatSetup from \"moment-duration-format\"\nimport Break from './components/Break'\nimport LongBreak from './components/LongBreak'\nimport Focus from './components/Focus'\nimport Timer from './components/Timer'\nimport Settings from \"./components/Settings\"\nimport endFocus from \"./media/piece-of-cake.mp3\"\nimport endBreak from \"./media/goes-without-saying.mp3\"\nimport './App.css'\n\nmomentDurationFormatSetup(moment)\n\nfunction App() {\n  const endFocusAudio = useRef(null)\n  const endBreakAudio = useRef(null)\n  const [breakLength, setBreakLength] = useState(300)\n  const [longBreakLength, setLongBreakLength] = useState(900)\n  const [focusLength, setFocusLength] = useState(1500)\n  const [focusNumber, setFocusNumber] = useState(0)\n  const [intervalID, setIntervalID] = useState(null)\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\")\n  const [timeLeft, setTimeLeft] = useState(focusLength)\n  const [autoStart, setAutoStart] = useState(true)\n  const isStarted = intervalID != null  \n  const formattedTimeLeft = moment.duration(timeLeft, \"s\").format(\"mm:ss\", { trim: false }) \n\n  //listen for changes to session durations\n  useEffect(() => {\n    if (currentSessionType === \"Break\")\n      setTimeLeft(breakLength)\n  }, [currentSessionType, breakLength])\n\n  useEffect(() => {\n    if (currentSessionType === \"Long Break\")\n      setTimeLeft(longBreakLength)\n  }, [currentSessionType, longBreakLength])\n\n  useEffect(() => {\n    if (currentSessionType === \"Focus\")\n      setTimeLeft(focusLength)\n  }, [currentSessionType, focusLength])\n\n  //listen for sessions to end\n  useEffect(() => {\n    if (timeLeft === 0 && currentSessionType === \"Focus\" && focusNumber < 3) {\n      endFocusAudio.current.volume = 0.1\n      endFocusAudio.current.play()\n      setCurrentSessionType(\"Break\")\n      setTimeLeft(breakLength)\n      setFocusNumber(focusNumber + 1)\n      if (!autoStart) {\n        clearInterval(intervalID)\n        setIntervalID(null)\n      }\n    }\n    else if (timeLeft === 0 && currentSessionType === \"Focus\" && focusNumber === 3) {\n      endFocusAudio.current.volume = 0.1\n      endFocusAudio.current.play()\n      setCurrentSessionType(\"Long Break\")\n      setTimeLeft(breakLength)\n      setFocusNumber(focusNumber + 1)\n      if (!autoStart) {\n        clearInterval(intervalID)\n        setIntervalID(null)\n      }\n    }\n    else if (timeLeft === 0 && currentSessionType === \"Break\") {\n      endBreakAudio.current.volume = 0.1\n      endBreakAudio.current.play()\n      setCurrentSessionType(\"Focus\")\n      setTimeLeft(focusLength)\n      if (!autoStart) {\n        clearInterval(intervalID)\n        setIntervalID(null)\n      }\n    }\n    else if (timeLeft === 0 && currentSessionType === \"Long Break\") {\n      endBreakAudio.current.volume = 0.1\n      endBreakAudio.current.play()\n      setCurrentSessionType(\"Focus\")\n      setFocusNumber(0)\n      setTimeLeft(focusLength)\n      if (!autoStart) {\n        clearInterval(intervalID)\n        setIntervalID(null)\n      }\n    }\n  }, [breakLength, currentSessionType, focusLength, timeLeft, focusNumber, autoStart, intervalID])\n\n  //start/pause button handler  \n  const handleStartPause = () => {\n    if (isStarted) {\n      clearInterval(intervalID)\n      setIntervalID(null)\n    } else {\n      const newIntervalID = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1\n          if (newTimeLeft >= 0) {\n            return newTimeLeft\n          }\n        })\n      }, 1000) //todo change to 1000\n      setIntervalID(newIntervalID)\n    }\n  }\n\n  //render\n  return (\n    <main className=\"App\">\n      <HelmetProvider><title>Pomodoro Timer | {formattedTimeLeft} </title></HelmetProvider>\n      <h2>Pomodoro Timer</h2>\n      <Timer\n        handleStartPause={handleStartPause}\n        timeLeft={timeLeft}\n        currentSessionType={currentSessionType}\n        setCurrentSessionType={setCurrentSessionType}\n        isStarted={isStarted}\n        focusLength={focusLength}\n        setFocusLength={setFocusLength}\n        setTimeLeft={setTimeLeft}\n        intervalID={intervalID}\n        setIntervalID={setIntervalID}\n        setBreakLength={setBreakLength}\n        breakLength={breakLength}\n        setLongBreakLength={setLongBreakLength}\n        longBreakLength={longBreakLength}\n        focusNumber={focusNumber}\n        setFocusNumber={setFocusNumber}\n        formattedTimeLeft={formattedTimeLeft} />\n      <div className=\"settings\">\n        <Focus\n          focusLength={focusLength}\n          setFocusLength={setFocusLength} />\n        <Break\n          breakLength={breakLength}\n          setBreakLength={setBreakLength}\n        />\n        <LongBreak\n          longBreakLength={longBreakLength}\n          setLongBreakLength={setLongBreakLength}\n        />\n      </div>\n      <Settings \n      autoStart={autoStart}\n      setAutoStart={setAutoStart}\n      />\n      <audio ref={endFocusAudio}><source src={endFocus} type=\"audio/mpeg\" /></audio>\n      <audio ref={endBreakAudio}><source src={endBreak} type=\"audio/mpeg\" /></audio>\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}