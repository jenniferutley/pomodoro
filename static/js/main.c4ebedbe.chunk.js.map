{"version":3,"sources":["piece-of-cake.mp3","components/Break.js","components/Focus.js","components/TimeLeft.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Break","breakLength","decrementBreakLengthByOneMinute","incrementBreakLengthByOneMinute","breakLengthInMinutes","moment","duration","minutes","onClick","Focus","focusLength","decrementFocusLengthByOneMinute","incrementFocusLengthByOneMinute","focusLengthInMinutes","momentDurationFormatSetup","TimeLeft","handleStartStop","timeLeft","currentSessionType","isStarted","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","setBreakLength","setFocusLength","intervalID","setIntervalID","setCurrentSessionType","setTimeLeft","useEffect","current","play","className","newBreakLength","clearInterval","newIntervalID","setInterval","prevTimeLeft","newFocusLength","load","ref","src","endFocus","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,2C,iLCmB5BC,EAhBD,SAAC,GAIR,IAHHC,EAGE,EAHFA,YACAC,EAEE,EAFFA,gCACAC,EACE,EADFA,gCAEMC,EAAuBC,IAAOC,SAASL,EAAa,KAAKM,UAC/D,OACI,iCACI,+CACA,2BAAIH,GACJ,4BAAQI,QAASN,GAAjB,KACA,4BAAQM,QAASL,GAAjB,OCKGM,EAhBD,SAAC,GAIR,IAHHC,EAGE,EAHFA,YACAC,EAEE,EAFFA,gCACAC,EACE,EADFA,gCAEMC,EAAuBR,IAAOC,SAASI,EAAa,KAAKH,UAC/D,OACI,iCACI,+CACA,2BAAIM,GACJ,4BAAQL,QAASG,GAAjB,KACA,4BAAQH,QAASI,GAAjB,O,aCVZE,GAA0BT,KAE1B,IAiBeU,EAjBE,SAAC,GAKX,IAJHC,EAIE,EAJFA,gBACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,mBACAC,EACE,EADFA,UAEMC,EAAoBf,IAAOC,SAASW,EAAU,KAAKI,OAAO,QAAS,CAAEC,MAAM,IACjF,OACI,iCACI,oDACA,2BAAIF,GACJ,2BAAIF,GACJ,4BAAQV,QAASQ,GAAkBG,EAAY,OAAS,W,sBCsFrDI,MAjGf,WACE,IAAMC,EAAeC,iBAAO,MADf,EAEyBC,mBAAS,KAFlC,mBAENzB,EAFM,KAEO0B,EAFP,OAGyBD,mBAAS,MAHlC,mBAGNhB,EAHM,KAGOkB,EAHP,OAIuBF,mBAAS,MAJhC,mBAING,EAJM,KAIMC,EAJN,OAKuCJ,mBAAS,SALhD,mBAKNR,EALM,KAKca,EALd,OAMmBL,mBAAShB,GAN5B,mBAMNO,EANM,KAMIe,EANJ,KAQbC,qBAAU,WACRD,EAAYtB,KACX,CAACA,IAEJuB,qBAAU,WACS,IAAbhB,IACFO,EAAaU,QAAQC,OACM,UAAvBjB,GACFa,EAAsB,SACtBC,EAAY/B,IAEkB,UAAvBiB,IACPa,EAAsB,SACtBC,EAAYtB,OAGf,CAACT,EAAaiB,EAAoBR,EAAaO,IAGlD,IA0BME,EAA0B,MAAdU,EAyBlB,OACE,6BAASO,UAAU,OACjB,6CACA,kBAAC,EAAD,CACEnC,YAAaA,EACbC,gCAxDkC,WACtC,IAAMmC,EAAiBpC,EAAc,GAEnC0B,EADEU,EAAiB,EACJ,EAEAA,IAoDblC,gCAjDkC,WACtCwB,EAAe1B,EAAc,OAkD3B,kBAAC,EAAD,CAAUiB,mBAAoBA,EAAoBF,gBAhC9B,WACtB,GAAIG,EACFmB,cAAcT,GACdC,EAAc,UACT,CACL,IAAMS,EAAgBC,aAAY,WAChCR,GAAY,SAAAS,GAAY,OAAIA,EAAe,OAC1C,KACHX,EAAcS,KAwBsEtB,SAAUA,EAAUE,UAAWA,IACnH,kBAAC,EAAD,CACET,YAAaA,EACbC,gCAjDkC,WACtC,IAAM+B,EAAiBhC,EAAc,GAEnCkB,EADEc,EAAiB,EACJ,EAEAA,IA6Cb9B,gCA1CkC,WACtCgB,EAAelB,EAAc,OA0C3B,4BAAQF,QAxBmB,WAC7BgB,EAAaU,QAAQS,OACrBL,cAAcT,GACdC,EAAc,MACdC,EAAsB,SACtBH,EAAe,MACfD,EAAe,KACfK,EAAY,QAiBV,SACA,2BAAOY,IAAKpB,GAAc,4BAAQqB,IAAKC,IAAUC,KAAK,kBCvFxCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4ebedbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piece-of-cake.7ad935d5.mp3\";","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Break = ({ \r\n    breakLength, \r\n    decrementBreakLengthByOneMinute, \r\n    incrementBreakLengthByOneMinute \r\n}) => {\r\n    const breakLengthInMinutes = moment.duration(breakLength, \"s\").minutes()\r\n    return (\r\n        <section>\r\n            <h2>Break Component</h2>\r\n            <p>{breakLengthInMinutes}</p>\r\n            <button onClick={decrementBreakLengthByOneMinute}>-</button>\r\n            <button onClick={incrementBreakLengthByOneMinute}>+</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Break\r\n","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Focus = ({\r\n    focusLength, \r\n    decrementFocusLengthByOneMinute, \r\n    incrementFocusLengthByOneMinute \r\n}) => {\r\n    const focusLengthInMinutes = moment.duration(focusLength, \"s\").minutes()\r\n    return (\r\n        <section>\r\n            <h2>Focus Component</h2>\r\n            <p>{focusLengthInMinutes}</p>\r\n            <button onClick={decrementFocusLengthByOneMinute}>-</button>\r\n            <button onClick={incrementFocusLengthByOneMinute}>+</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Focus\r\n","import React from 'react'\r\nimport moment from \"moment\"\r\nimport momentDurationFormatSetup from \"moment-duration-format\"\r\n\r\nmomentDurationFormatSetup(moment)\r\n\r\nconst TimeLeft = ({\r\n    handleStartStop,\r\n    timeLeft,\r\n    currentSessionType,\r\n    isStarted\r\n}) => {\r\n    const formattedTimeLeft = moment.duration(timeLeft, \"s\").format(\"mm:ss\", { trim: false })\r\n    return (\r\n        <section>\r\n            <h2>Time Left Comoponent</h2>\r\n            <p>{formattedTimeLeft}</p>\r\n            <p>{currentSessionType}</p>\r\n            <button onClick={handleStartStop}>{isStarted ? \"Stop\" : \"Start\"}</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default TimeLeft\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport Break from './components/Break'\nimport Focus from './components/Focus'\nimport TimeLeft from './components/TimeLeft'\nimport endFocus from \"./piece-of-cake.mp3\"\nimport './App.css';\n\nfunction App() {\n  const audioElement = useRef(null)\n  const [breakLength, setBreakLength] = useState(300)\n  const [focusLength, setFocusLength] = useState(1500)\n  const [intervalID, setIntervalID] = useState(null)\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\")\n  const [timeLeft, setTimeLeft] = useState(focusLength)\n\n  useEffect(() => {\n    setTimeLeft(focusLength)\n  }, [focusLength])\n\n  useEffect(() => {\n    if (timeLeft === 0) {\n      audioElement.current.play()\n      if (currentSessionType === \"Focus\") {\n        setCurrentSessionType(\"Break\")\n        setTimeLeft(breakLength)\n      }\n      else if (currentSessionType === \"Break\") {\n        setCurrentSessionType(\"Focus\")\n        setTimeLeft(focusLength)\n      }\n    }\n  }, [breakLength, currentSessionType, focusLength, timeLeft])\n\n  //break\n  const decrementBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength - 60\n    if (newBreakLength < 0) {\n      setBreakLength(0)\n    } else {\n      setBreakLength(newBreakLength)\n    }\n  }\n  const incrementBreakLengthByOneMinute = () => {\n    setBreakLength(breakLength + 60)\n  }\n\n  //focus\n  const decrementFocusLengthByOneMinute = () => {\n    const newFocusLength = focusLength - 60\n    if (newFocusLength < 0) {\n      setFocusLength(0)\n    } else {\n      setFocusLength(newFocusLength)\n    }\n  }\n  const incrementFocusLengthByOneMinute = () => {\n    setFocusLength(focusLength + 60)\n  }\n\n  //time left\n  const isStarted = intervalID != null\n  const handleStartStop = () => {\n    if (isStarted) {\n      clearInterval(intervalID)\n      setIntervalID(null)\n    } else {\n      const newIntervalID = setInterval(() => {\n        setTimeLeft(prevTimeLeft => prevTimeLeft - 1)\n      }, 100) //todo change to 1000\n      setIntervalID(newIntervalID)\n    }\n  }\n\n  //reset\n  const handleResetButtonClick = () => {\n    audioElement.current.load()\n    clearInterval(intervalID)\n    setIntervalID(null)\n    setCurrentSessionType(\"Focus\")\n    setFocusLength(1500)\n    setBreakLength(300)\n    setTimeLeft(1500) //This seems kind of dumb--resets to 25 and focus even if on a break\n    //also, \"reset\" should be called \"reset to DEFAULTS\"\n  }\n  //render\n  return (\n    <section className=\"App\">\n      <h1>App Component</h1>\n      <Break\n        breakLength={breakLength}\n        decrementBreakLengthByOneMinute={decrementBreakLengthByOneMinute}\n        incrementBreakLengthByOneMinute={incrementBreakLengthByOneMinute}\n      />\n      <TimeLeft currentSessionType={currentSessionType} handleStartStop={handleStartStop} timeLeft={timeLeft} isStarted={isStarted} />\n      <Focus\n        focusLength={focusLength}\n        decrementFocusLengthByOneMinute={decrementFocusLengthByOneMinute}\n        incrementFocusLengthByOneMinute={incrementFocusLengthByOneMinute} />\n      <button onClick={handleResetButtonClick}>Reset</button>\n      <audio ref={audioElement}><source src={endFocus} type=\"audio/mpeg\" /></audio>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}